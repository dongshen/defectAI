3=[from, __future__, import, unicode_literals]
5=[import, logging]
6=[import, sys]
7=[import, types]
9=[from, django, import, http]
10=[from, django, ., conf, import, settings]
11=[from, django, ., core, import, urlresolvers]
12=[from, django, ., core, import, signals]
13=[from, django, ., core, ., exceptions, import, MiddlewareNotUsed, ,, PermissionDenied, ,, SuspiciousOperation]
14=[from, django, ., db, import, connections, ,, transaction]
15=[from, django, ., http, ., multipartparser, import, MultiPartParserError]
16=[from, django, ., utils, ., encoding, import, force_text]
17=[from, django, ., utils, ., module_loading, import, import_string]
18=[from, django, ., utils, import, six]
19=[from, django, ., views, import, debug]
21=[logger, =, logging, ., getLogger, (, 'django.request', )]
24=[class, BaseHandler, (, object, ), :]
26=[response_fixes, =, []
27=[http, ., fix_location_header, ,]
28=[http, ., conditional_content_removal, ,]
29=[]]
31=[def, __init__, (, self, ), :]
32=[self, ., _request_middleware, =, None]
33=[self, ., _view_middleware, =, None]
34=[self, ., _template_response_middleware, =, None]
35=[self, ., _response_middleware, =, None]
36=[self, ., _exception_middleware, =, None]
38=[def, load_middleware, (, self, ), :]
39=["""
        Populate middleware lists from settings.MIDDLEWARE_CLASSES.

        Must be called after the environment is fixed (see __call__ in subclasses).
        """]
44=[self, ., _view_middleware, =, [, ]]
45=[self, ., _template_response_middleware, =, [, ]]
46=[self, ., _response_middleware, =, [, ]]
47=[self, ., _exception_middleware, =, [, ]]
49=[request_middleware, =, [, ]]
50=[for, middleware_path, in, settings, ., MIDDLEWARE_CLASSES, :]
51=[mw_class, =, import_string, (, middleware_path, )]
52=[try, :]
53=[mw_instance, =, mw_class, (, )]
54=[except, MiddlewareNotUsed, as, exc, :]
55=[if, settings, ., DEBUG, :]
56=[if, six, ., text_type, (, exc, ), :]
57=[logger, ., debug, (, 'MiddlewareNotUsed(%r): %s', ,, middleware_path, ,, exc, )]
58=[else, :]
59=[logger, ., debug, (, 'MiddlewareNotUsed: %r', ,, middleware_path, )]
60=[continue]
62=[if, hasattr, (, mw_instance, ,, 'process_request', ), :]
63=[request_middleware, ., append, (, mw_instance, ., process_request, )]
64=[if, hasattr, (, mw_instance, ,, 'process_view', ), :]
65=[self, ., _view_middleware, ., append, (, mw_instance, ., process_view, )]
66=[if, hasattr, (, mw_instance, ,, 'process_template_response', ), :]
67=[self, ., _template_response_middleware, ., insert, (, 0, ,, mw_instance, ., process_template_response, )]
68=[if, hasattr, (, mw_instance, ,, 'process_response', ), :]
69=[self, ., _response_middleware, ., insert, (, 0, ,, mw_instance, ., process_response, )]
70=[if, hasattr, (, mw_instance, ,, 'process_exception', ), :]
71=[self, ., _exception_middleware, ., insert, (, 0, ,, mw_instance, ., process_exception, )]
75=[self, ., _request_middleware, =, request_middleware]
77=[def, make_view_atomic, (, self, ,, view, ), :]
78=[non_atomic_requests, =, getattr, (, view, ,, '_non_atomic_requests', ,, set, (, ), )]
79=[for, db, in, connections, ., all, (, ), :]
80=[if, (, db, ., settings_dict, [, 'ATOMIC_REQUESTS', ]]
81=[and, db, ., alias, not, in, non_atomic_requests, ), :]
82=[view, =, transaction, ., atomic, (, using, =, db, ., alias, ), (, view, )]
83=[return, view]
85=[def, get_exception_response, (, self, ,, request, ,, resolver, ,, status_code, ), :]
86=[try, :]
87=[callback, ,, param_dict, =, resolver, ., resolve_error_handler, (, status_code, )]
88=[response, =, callback, (, request, ,, **, param_dict, )]
89=[except, :]
90=[signals, ., got_request_exception, ., send, (, sender, =, self, ., __class__, ,, request, =, request, )]
91=[response, =, self, ., handle_uncaught_exception, (, request, ,, resolver, ,, sys, ., exc_info, (, ), )]
93=[return, response]
95=[def, get_response, (, self, ,, request, ), :]
96=["Returns an HttpResponse object for the given HttpRequest"]
102=[urlconf, =, settings, ., ROOT_URLCONF]
103=[urlresolvers, ., set_urlconf, (, urlconf, )]
104=[resolver, =, urlresolvers, ., RegexURLResolver, (, r'^/', ,, urlconf, )]
105=[try, :]
106=[response, =, None]
108=[for, middleware_method, in, self, ., _request_middleware, :]
109=[response, =, middleware_method, (, request, )]
110=[if, response, :]
111=[break]
113=[if, response, is, None, :]
114=[if, hasattr, (, request, ,, 'urlconf', ), :]
116=[urlconf, =, request, ., urlconf]
117=[urlresolvers, ., set_urlconf, (, urlconf, )]
118=[resolver, =, urlresolvers, ., RegexURLResolver, (, r'^/', ,, urlconf, )]
120=[resolver_match, =, resolver, ., resolve, (, request, ., path_info, )]
121=[callback, ,, callback_args, ,, callback_kwargs, =, resolver_match]
122=[request, ., resolver_match, =, resolver_match]
125=[for, middleware_method, in, self, ., _view_middleware, :]
126=[response, =, middleware_method, (, request, ,, callback, ,, callback_args, ,, callback_kwargs, )]
127=[if, response, :]
128=[break]
130=[if, response, is, None, :]
131=[wrapped_callback, =, self, ., make_view_atomic, (, callback, )]
132=[try, :]
133=[response, =, wrapped_callback, (, request, ,, *, callback_args, ,, **, callback_kwargs, )]
134=[except, Exception, as, e, :]
138=[for, middleware_method, in, self, ., _exception_middleware, :]
139=[response, =, middleware_method, (, request, ,, e, )]
140=[if, response, :]
141=[break]
142=[if, response, is, None, :]
143=[raise]
146=[if, response, is, None, :]
147=[if, isinstance, (, callback, ,, types, ., FunctionType, ), :]
148=[view_name, =, callback, ., __name__]
149=[else, :]
150=[view_name, =, callback, ., __class__, ., __name__, +, '.__call__']
151=[raise, ValueError, (, "The view %s.%s didn't return an HttpResponse object. It returned None instead."]
152=[%, (, callback, ., __module__, ,, view_name, ), )]
156=[if, hasattr, (, response, ,, 'render', ), and, callable, (, response, ., render, ), :]
157=[for, middleware_method, in, self, ., _template_response_middleware, :]
158=[response, =, middleware_method, (, request, ,, response, )]
160=[if, response, is, None, :]
161=[raise, ValueError, (]
162=["%s.process_template_response didn't return an "]
163=["HttpResponse object. It returned None instead."]
164=[%, (, middleware_method, ., __self__, ., __class__, ., __name__, ), )]
165=[response, =, response, ., render, (, )]
167=[except, http, ., Http404, as, e, :]
168=[logger, ., warning, (, 'Not Found: %s', ,, request, ., path, ,]
169=[extra, =, {]
170=['status_code', :, 404, ,]
171=['request', :, request]
172=[}, )]
173=[if, settings, ., DEBUG, :]
174=[response, =, debug, ., technical_404_response, (, request, ,, e, )]
175=[else, :]
176=[response, =, self, ., get_exception_response, (, request, ,, resolver, ,, 404, )]
178=[except, PermissionDenied, :]
179=[logger, ., warning, (]
180=['Forbidden (Permission denied): %s', ,, request, ., path, ,]
181=[extra, =, {]
182=['status_code', :, 403, ,]
183=['request', :, request]
184=[}, )]
185=[response, =, self, ., get_exception_response, (, request, ,, resolver, ,, 403, )]
187=[except, MultiPartParserError, :]
188=[logger, ., warning, (]
189=['Bad request (Unable to parse request body): %s', ,, request, ., path, ,]
190=[extra, =, {]
191=['status_code', :, 400, ,]
192=['request', :, request]
193=[}, )]
194=[response, =, self, ., get_exception_response, (, request, ,, resolver, ,, 400, )]
196=[except, SuspiciousOperation, as, e, :]
199=[security_logger, =, logging, ., getLogger, (, 'django.security.%s', %]
200=[e, ., __class__, ., __name__, )]
201=[security_logger, ., error, (]
202=[force_text, (, e, ), ,]
203=[extra, =, {]
204=['status_code', :, 400, ,]
205=['request', :, request]
206=[}, )]
207=[if, settings, ., DEBUG, :]
208=[return, debug, ., technical_500_response, (, request, ,, *, sys, ., exc_info, (, ), ,, status_code, =, 400, )]
210=[response, =, self, ., get_exception_response, (, request, ,, resolver, ,, 400, )]
212=[except, SystemExit, :]
214=[raise]
216=[except, :]
218=[signals, ., got_request_exception, ., send, (, sender, =, self, ., __class__, ,, request, =, request, )]
219=[response, =, self, ., handle_uncaught_exception, (, request, ,, resolver, ,, sys, ., exc_info, (, ), )]
221=[try, :]
223=[for, middleware_method, in, self, ., _response_middleware, :]
224=[response, =, middleware_method, (, request, ,, response, )]
226=[if, response, is, None, :]
227=[raise, ValueError, (]
228=["%s.process_response didn't return an "]
229=["HttpResponse object. It returned None instead."]
230=[%, (, middleware_method, ., __self__, ., __class__, ., __name__, ), )]
231=[response, =, self, ., apply_response_fixes, (, request, ,, response, )]
232=[except, :]
233=[signals, ., got_request_exception, ., send, (, sender, =, self, ., __class__, ,, request, =, request, )]
234=[response, =, self, ., handle_uncaught_exception, (, request, ,, resolver, ,, sys, ., exc_info, (, ), )]
236=[response, ., _closable_objects, ., append, (, request, )]
238=[return, response]
240=[def, handle_uncaught_exception, (, self, ,, request, ,, resolver, ,, exc_info, ), :]
241=["""
        Processing for any otherwise uncaught exceptions (those that will
        generate HTTP 500 responses). Can be overridden by subclasses who want
        customised 500 handling.

        Be *very* careful when overriding this because the error could be
        caused by anything, so assuming something like the database is always
        available would be an error.
        """]
250=[if, settings, ., DEBUG_PROPAGATE_EXCEPTIONS, :]
251=[raise]
253=[logger, ., error, (, 'Internal Server Error: %s', ,, request, ., path, ,]
254=[exc_info, =, exc_info, ,]
255=[extra, =, {]
256=['status_code', :, 500, ,]
257=['request', :, request]
258=[}]
259=[)]
261=[if, settings, ., DEBUG, :]
262=[return, debug, ., technical_500_response, (, request, ,, *, exc_info, )]
265=[if, resolver, ., urlconf_module, is, None, :]
266=[six, ., reraise, (, *, exc_info, )]
268=[callback, ,, param_dict, =, resolver, ., resolve_error_handler, (, 500, )]
269=[return, callback, (, request, ,, **, param_dict, )]
271=[def, apply_response_fixes, (, self, ,, request, ,, response, ), :]
272=["""
        Applies each of the functions in self.response_fixes to the request and
        response, modifying the response in the process. Returns the new
        response.
        """]
277=[for, func, in, self, ., response_fixes, :]
278=[response, =, func, (, request, ,, response, )]
279=[return, response]
